< x1, x2, x3, x4 |
#	4*[x4,x1,x1], [x4,x1,x2], [x4,x1,x3], [x4,x1,x4],
#	[x4,x2,x1], 4*[x4,x2,x2] = [x4,x1,x1], [x4,x2,x3], [x4,x2,x4],
#	[x4,x3,x1], [x4,x3,x2], 4*[x4,x3,x3] = [x4,x2,x2], [x4,x3,x4],
	4*x1 + 2*[x4,x3] + [x4,x2],
	16*x2 + 4*[x4,x3]  + -1*[x4,x1],
	64*x3 + -4*[x4,x2] + -2*[x4,x1] |
	32*[x1,x2] + 64*[x1,x3] + 128*[x2,x3] >

free := FreeLieRing(Integers, ["x1", "x2", "x3", "x4"]);
x1 := free.1; x2 := free.2; x3 := free.3; x4 := free.4;
rels := [
	4*x4*x1*x1, x4*x1*x2, x4*x1*x3, x4*x1*x4,
	x4*x2*x1, 4*x4*x2*x2 - x4*x1*x1, x4*x2*x3, x4*x2*x4,
	x4*x3*x1, x4*x3*x2, 4*x4*x3*x3 - x4*x2*x2, x4*x3*x4,
	4*x1 + 2*x4*x3 + x4*x2,
	16*x2 + 4*x4*x3  + -1*x4*x1,
	64*x3 + -4*x4*x2 + -2*x4*x1 ];
elm := 32*x1*x2 + 64*x1*x3 + 128*x2*x3;

quotient := FpLieRing( free, rels : maxdeg := 3 );
pi := CanonicalProjection(quotient);
pi(elm);
